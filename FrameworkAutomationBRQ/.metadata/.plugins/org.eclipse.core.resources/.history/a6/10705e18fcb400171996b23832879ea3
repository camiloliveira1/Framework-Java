package ActionsSelenium;

import java.io.File;
import java.io.IOException;
import java.util.concurrent.TimeUnit;

import org.apache.commons.io.FileUtils;
import org.openqa.selenium.By;
import org.openqa.selenium.OutputType;
import org.openqa.selenium.TakesScreenshot;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.ie.InternetExplorerDriver;
import org.openqa.selenium.interactions.Actions;
import org.testng.Assert;

import TestBaseSelenium.TestBase;


	public class ActionsWeb extends TestBase {
		
	/////FUNCIONALIDADES DE AÇÕES (STEPS)/////
		//ABRE O BROWSER COM A URL
		public void openBrowser (String browser, String url) throws IOException
		{
			getStepName = getNameMethodElement ();
			try
			{
				switch (browser){
				case "Chrome":
					System.setProperty("webdriver.chrome.driver", "\\FrameworkAutomationBRQ\\FrameworkAutomation\\drivers\\chromedriver.exe");
					//System.setProperty("webdriver.chrome.driver", System.getProperty("user.dir")+ "\\src\\test\\resources\\chromedriver.exe");
					driver = new ChromeDriver();
					break;
				case "Firefox":
					System.setProperty("webdriver.gecko.driver", "\\FrameworkAutomationBRQ\\FrameworkAutomation\\drivers\\geckodriver.exe");
					driver = new FirefoxDriver();				
					break;			
				case "IE":
					System.setProperty("webdriver.ie.driver", "\\FrameworkAutomationBRQ\\FrameworkAutomation\\drivers\\IEDriverServer.exe");
					driver = new InternetExplorerDriver();				
				case "AllBrowsers":
				}
				
				driver.get(url);			
				driver.manage().timeouts().implicitlyWait(5, TimeUnit.SECONDS);			
				AssertStep(true,"Url: '"+ url +"' digitada");
			}
			catch (Exception e)
			{
				AssertStep(false, "Erro ao digitar Url: '"+url+"' '"+e+"'");
			}
			
			
		}
		
		//DIGITA O VALOR NO CAMPO INPUT
		public void setInputBox(String byelement, String element, String value) throws IOException
		{
			getStepName = getNameMethodElement ();
			try
			{
				indentifyElemnt(byelement, element);
				focusElement();
				this.element.sendKeys(value);
				AssertStep(true,"Valor '"+ value +"' foi digitado no inputBox: '"+element+"'");						
			}
			catch (Exception e)
			{
				AssertStep(false,"Erro ao digitar o valor: '"+ value +"' no inputBox: '"+element+"'");
			}
		}
			
		//CLICK NO ELEMENTO
		public void clickElement (String byelement, String element) throws IOException{
			getStepName = getNameMethodElement ();
			try
			{
				indentifyElemnt(byelement, element);
				focusElement();
				AssertStep(true,"Realizado click no elemento '"+element+"'");
				this.element.click();
				driver.manage().timeouts().implicitlyWait(5, TimeUnit.SECONDS);
			}
			catch (Exception e)
			{
				AssertStep(false,"Erro ao clicar no elemento '"+element+"'");
			}
			
		}
			
		
	/////ASSERTS PARA RESULTADOS FINAIS DO CT/////
		//ASSERT - VERIFICA SE O ELEMENTO INFORMADO ESTÁ VISIVEL - ASSERT PARA RESULTADO DE TESTE
		public void assertElementDisplayed(String byelement, String element) throws IOException{
			getStepName = getNameMethodElement ();
			try{
				indentifyElemnt(byelement, element);
				Assert.assertEquals(true, this.element.isDisplayed());
				focusElement();
				AssertStep(true,"<html>Teste '"+nomeTest+"' concluido com êxito.<br/>Elemento: "+this.element+" carregado.</html>");
			}catch (Exception e)
			{
				AssertStep(false,"<html>Teste '"+nomeTest+"' não obteve o resultado esperado.<br/>Elemento: " +this.element+" NÃO foi carregado.</html>");
			}
				
		}
		
		public void assertValues(String byelement, String element, String expected) throws IOException{
			getStepName = getNameMethodElement ();
			try{
				
				indentifyElemnt(byelement, element);
				focusElement();
					if (this.element.equals(expected))
					{
						AssertStep(true,"<html>Teste '"+nomeTest+"' executado com êxito.<br/> VALOR ESPERADO: "+ expected +"<br/> VALOR DE RETORNO: "+this.element.getText()+"</html>");
					}else
					{
						AssertStep(false,"<html>Teste '"+nomeTest+"' não obteve êxito.<br/> VALOR ESPERADO: "+ expected +"<br/> VALOR DE RETORNO: "+this.element.getText()+"</html>");
					}
				}
			catch (Exception e)
					{
						AssertStep(false,"Elemento não localizado: "+this.element.getText());
					}
				
		}	
		
	//////FUNCIONALIDADES DE APOIO À EXECUÇÃO/////
		//CRIA ASSERTS PARA CADA STEP (RELATÓRIO)
		public void AssertStep (Boolean step, String msg) throws IOException
		{
			if (step == false)
			{		
				childTest = test.createNode(getStepName).fail(msg).addScreenCaptureFromPath(captureScreen(driver,getStepName));
			}else if (step == true){
			
				childTest = test.createNode(getStepName).pass(msg).addScreenCaptureFromPath(captureScreen(driver,getStepName));
			}
		}
		
		//CAPTURA EVIDENCIA DO SISTEMA
		public String captureScreen(WebDriver driver, String screenName) throws IOException
		{
			String pathCaptureimg = pathProject + "\\Repositorios\\imgs\\"+ nomeSuiteTest +"\\" +nomeTest+"\\";
			File file = new File(pathCaptureimg);
	        file.mkdir();
			TakesScreenshot screen = (TakesScreenshot) driver;
			File src = screen.getScreenshotAs(OutputType.FILE);
			
			String dest = pathCaptureimg + screenName + "_"+ data +".png";
			
			File target = new File(dest);
			FileUtils.copyFile(src, target);
			
			return dest;
		}
		
		//IDENTIFICA QUAL O TIPO DO ELEMENTO INFORMADO (NAME, ID, CSS, XPATH)
		public void indentifyElemnt(String byelement, String element){

				switch (byelement) 
				{			
				case "name":
					this.element = driver.findElement(By.name(element));
					break;
				case "id":
					this.element = driver.findElement(By.id(element));
					break;
				case "class":				
					this.element = driver.findElement(By.className(element));				
					break;
				case "xpath":
					this.element = driver.findElement(By.xpath(element));
				}			
		}
		
		//DA FOCUS NO ELMENTO ANTES DE TIRAR EVIDENCIA.
		public void focusElement(){
			new Actions(driver).moveToElement(this.element).perform();
		}
		
		public String getNameMethodElement (){
			String nameMethod = Thread.currentThread().getStackTrace()[3].getMethodName();
			return nameMethod;
		}
	}

